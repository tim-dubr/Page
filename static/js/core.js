$(document).ready(function () {
  // const langSwitcher = document.getElementById('language-switcher');
  const langSwitcher = document.querySelectorAll('.language-switcher');
  const defaultLang = 'en';

  const basePath = window.location.pathname.includes("/dubrovsky/")
    ? "/dubrovsky/"
    : "/";

  // ----------------------------------------------------------------------
  // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (—á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è–ª—Å—è ?lang=ru)
  function updateAllLinksLanguage(lang) {
    document.querySelectorAll('a[href]').forEach(link => {
      const href = link.getAttribute('href');

      if (
        href &&
        !href.startsWith('http') &&
        !href.startsWith('#') &&
        !href.startsWith('mailto') &&
        !href.startsWith('javascript')
      ) {
        // –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç /dubrovsky/, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
        const hasDubrovsky = href.includes('/dubrovsky/');

        // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å (—É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ /)
        const cleanHref = href.replace(/^\/+/, '');

        // —Ñ–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑—É ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º /dubrovsky/ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        const fullPath = hasDubrovsky
          ? cleanHref
          : basePath + cleanHref;

        const url = new URL(fullPath, window.location.origin);

        // —Å–æ—Ö—Ä–∞–Ω—è–µ–º hash (–µ—Å–ª–∏ –±—ã–ª)
        if (link.hash) {
          url.hash = link.hash;
        }

        // —Å–æ—Ö—Ä–∞–Ω—è–µ–º query –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ (–µ—Å–ª–∏ –±—ã–ª)
        const originalUrl = new URL(href, window.location.origin);
        originalUrl.searchParams.forEach((value, key) => {
          url.searchParams.set(key, value);
        });

        // –¥–æ–±–∞–≤–ª—è–µ–º lang
        url.searchParams.set('lang', lang);

        // –ø—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π href
        link.setAttribute('href', url.pathname + url.search + url.hash);

        // console.log(`üîó –û–±–Ω–æ–≤–∏–ª —Å—Å—ã–ª–∫—É: ${href} -> ${url.pathname + url.search + url.hash}`);
      }
    });
  }


  // ----------------------------------------------------------------------
  // –û–±–Ω–æ–≤–ª—è–µ–º URL –±—Ä–∞—É–∑–µ—Ä–∞ (pushState)
  function updateUrlLang(lang) {
    const url = new URL(window.location);
    url.searchParams.set('lang', lang);
    window.history.replaceState({ path: url.href }, '', url.href);
  }

  // ----------------------------------------------------------------------
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫
  async function setLanguage(lang) {
    try {
      // console.log("üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —è–∑—ã–∫:", lang);

      const response = await fetch(`static/js/locales/${lang}.json`);
      if (!response.ok) {
        // console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ${lang}.json. –°—Ç–∞—Ç—É—Å: ${response.status}`);
        return;
      }

      const translations = await response.json();

      // –æ–±–Ω–æ–≤–ª—è–µ–º lang –≤ <html>
      document.documentElement.lang = lang;

      // –ø—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
      document.querySelectorAll('[data-i18n-key]').forEach((element) => {
        const key = element.getAttribute('data-i18n-key');
        if (translations[key]) {
          if (Array.isArray(translations[key])) {
            // –µ—Å–ª–∏ –º–∞—Å—Å–∏–≤ ‚Üí —Å–æ–µ–¥–∏–Ω—è–µ–º –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ HTML
            element.innerHTML = translations[key].join("");
          } else {
            // –µ—Å–ª–∏ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Üí –≤—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
            element.innerText = translations[key];
          }

          if (key === 'page_title') {
            document.title = Array.isArray(translations[key])
              ? translations[key].join("")
              : translations[key];
          }
        }
      });

      // –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
      document.querySelectorAll('.lang-btn').forEach((btn) => {
        btn.classList.toggle('active', btn.getAttribute('data-lang') === lang);
      });

      // —Å–æ—Ö—Ä–∞–Ω—è–µ–º
      localStorage.setItem('lang', lang);
      // console.log("üíæ localStorage.lang =", localStorage.getItem('lang'));

      // –æ–±–Ω–æ–≤–ª—è–µ–º URL –∏ —Å—Å—ã–ª–∫–∏
      updateUrlLang(lang);
      updateAllLinksLanguage(lang);
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ setLanguage:', err);
    }
  }

  // ----------------------------------------------------------------------
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ –±—Ä–∞—É–∑–µ—Ä—É
  function detectUserLang() {
    const browserLang = navigator.language || navigator.userLanguage;
    console.log("üåç –Ø–∑—ã–∫ –±—Ä–∞—É–∑–µ—Ä–∞:", browserLang);

    return (browserLang && browserLang.startsWith("ru")) ? "ru" : "en";
  }

  // ----------------------------------------------------------------------
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤
  if (langSwitcher.length) {
    langSwitcher.forEach((switcher) => {
      switcher.addEventListener('click', (event) => {
        if (event.target.classList.contains('lang-btn')) {
          const newLang = event.target.getAttribute('data-lang');
          if (newLang) {
            console.log("üñ± –ö–ª–∏–∫ –ø–æ —è–∑—ã–∫—É:", newLang);
            setLanguage(newLang);
          }
        }
      });
    });
  }

  // ----------------------------------------------------------------------
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —è–∑—ã–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  (async () => {
    const urlParams = new URLSearchParams(window.location.search);
    const langFromUrl = urlParams.get('lang');
    const langFromStorage = localStorage.getItem('lang');

    let userLang = langFromUrl || langFromStorage;

    if (!userLang) {
      userLang = detectUserLang();
    }

    if (!userLang) {
      userLang = defaultLang;
    }

    console.log("üöÄ –Ø–∑—ã–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ:", userLang);
    setLanguage(userLang);

    // –µ—Å–ª–∏ –±—ã–ª lang –≤ URL ‚Üí –æ–±–Ω–æ–≤–ª—è–µ–º localStorage
    if (langFromUrl && langFromUrl !== langFromStorage) {
      localStorage.setItem('lang', langFromUrl);
      console.log("üíæ –°–æ—Ö—Ä–∞–Ω–∏–ª —è–∑—ã–∫ –∏–∑ URL –≤ localStorage:", langFromUrl);
    }
  })();




//---modal
  $('.toggler').on('click', function (e) {
    e.preventDefault();
    var $this = $(e.currentTarget);
    var target = $this.data('target');
    $('.modal').removeClass('_active');
    $('body').removeClass('_modal-open');
    $('.modal__backdrop').fadeOut();

    $("#" + $(this).data("target")).toggleClass('_active');
    $('.modal__backdrop').fadeIn();
    $("#" + $(this).data("target")).closest('body').toggleClass('_modal-open');
  });

  $('.modal__close, .modal__mask, .modal__backdrop').on('click', function (e) {
    e.preventDefault();

    $('.modal').removeClass('_active');
    $('.modal__backdrop').fadeOut();
    $('body').removeClass('_modal-open');
  });
  // modal-sort


  $(".book__item .more__link").on("click", function (e) {
    e.preventDefault();
    $(this).closest(".book__item").find(".book__more").slideToggle(500);
    $(this).toggleClass("open");
  });



});
